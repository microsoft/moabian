#!/usr/bin/env bash
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# vim:filetype=sh:

set -euo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
die() { ret=$?; printf "%s\n" "$@" >&2; exit "$ret"; }

require() { hash "$@" || exit 127; }

require west

## Log script output
exec 1> >(tee "/tmp/stdout.log")
exec 2> >(tee "/tmp/stderr.log")


# Steps to build from scratch:
# cd app
# cmake -B build
# cd build
# make -j 12


# Version Schema
# major.minor.patch.timestamp
# 3.0.4: atomic get/set of joystick/menu
# 3.0.5: mutexes
# 3.0.6: display calls handled by main.c loop w/timer instead of sleep
# 3.0.7: restored display to it's own thread (due to main blocking on FIFO queue)
# 3.0.8: unused
# 3.0.10: always copy string from pi (instead of using text index)
# 3.0.11: three display string/icon types
# 3.0.12: add MOON icon
# 3.0.13: add all IEC Power Symbols
# 3.0.14: no changes, just bumping versions to match SW
# 3.0.15: merge into moabian
# 3.0.16: off-by-one icon errors
# 3.0.17: Testing new MUTEX protected display.c code in MUTEX branch
# 3.0.19: Arbitrary version bump to be in sync with the software stack
# 3.0.20: Pitch/roll to servo 1/2/3 coordinate transform removed (now in hat.py)
# 3.0.21: Tighten up the log info messages
# 3.0.22: Trying to capture 3 Rx buffer overruns with WARN message
# 3.0.23: Show FW version on boot; tighter FW logs
# 3.0.24: Sync'd with SW v3.0.24
# 3.0.25: Possible fix for critical SPI chip-select contention (controller vs peripheral)
# 3.0.27: applying peter's CS fix
# 3.0.28: spi_cfg.cs = NULL attempt
# 3.0.29: skip
# 3.0.30: Zephyr 2.1 patch for SPI CS peripheral mode
# "    ": compile against Zephyr 2.1 from this fork: https://github.com/scotstan/zephyr/tree/Moabian_SPI_v3_fixes
# 3.1.__: Version sync with v3.1.0 of Moabian. Dropping the last set of digits

if [ -z ${VERSION+x} ]; then echo "Set VERSION environment variable"; else echo "Firmwire OLED: Moab v.'$VERSION'"; fi
#VERSION="3.1"

# YRDDDHR: 2103908. 2021, 39th day of the year, 08th hour (PDT)
TIMESTAMP=$(TZ='America/Los_Angeles' date +"%j%H%M")
export MAJORMINORPATCH=$VERSION
export SEMVER=$VERSION.$TIMESTAMP

# Lets you run this script from anywhere
readonly _D="$(dirname "$(readlink -f "$0")")"  && cd $_D

# Dump firmware binaries here
DEST="$_D/output"
[[ -d $DEST ]] || die "Need $DEST folder created by host"
echo "Saving firmware to $DEST"

# check for private firmware signature before continuing
[[ -e $DEST/root-rsa-2048.pem ]] || die "Need $DEST/root-rsa-2048.pem signature file"
ls -l $DEST/root-rsa-2048.pem

# production "app" folder
build () {
    echo "Building Moab hat firmware with embedded version:" $SEMVER

    west build -b moab_hat --pristine auto
    west sign -d build -t imgtool -- --key $DEST/root-rsa-2048.pem

    # SHA=$(git rev-parse HEAD | cut -b 1-4)
    # DMY=$(date +"%Y%m%d-%H%M")
    FN="$SEMVER.bin"
    cp build/zephyr/zephyr.signed.bin "$DEST/v$FN"
}

install() {
    # "moab" must be setup for password-less ssh in ~/.ssh/config
    if [[ $(ssh moab "hostname") ]]; then
        # copy the last build to the pi
        FN=$(ls -1 $DEST | tail -1)

        echo "Installing $DEST/$FN on moab"
        scp "$DEST/$FN" moab:$FN || echo "scp copy to moab failed"
        sleep 5
        ssh moab "sudo moab/bin/flash /home/pi/$FN"
    fi 
}

clean() {
    echo "removing temporary folders"
    rm -rf build
    rm -rf binaries
}

cmd="${1:-build}"

[[ "$cmd" == "build" ]] && build
[[ "$cmd" == "clean" ]] && clean
[[ "$cmd" == "install" ]] && install
